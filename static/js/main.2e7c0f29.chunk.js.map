{"version":3,"sources":["hooks/user/useUser.ts","modules/user.ts","hooks/user/useUserActions.ts","utils/constants.ts","components/AppHeader.tsx","components/user/SignInForm.tsx","components/ErrorMessage.tsx","hooks/useQuery.ts","components/SuccessMessage.tsx","screens/SignInScreen.tsx","modules/contest.ts","components/contest/ContestItem.tsx","components/contest/ContestList.tsx","hooks/contest/useContest.ts","screens/ContestScreen.tsx","hooks/contest/useContestActions.ts","modules/team.ts","components/team/MemberItem.tsx","components/team/MemberList.tsx","components/team/TeamItem.tsx","components/team/TeamList.tsx","hooks/team/useTeam.ts","screens/TeamsScreen.tsx","hooks/team/useTeamActions.ts","modules/signUp.ts","components/user/SignUpForm.tsx","hooks/signUp/useSignUpActions.ts","screens/SignUpScreen.tsx","hooks/signUp/useSignUp.ts","modules/createTeam.ts","components/team/CreateTeamForm.tsx","hooks/createTeam/useCreateTeamActions.ts","screens/CreateTeamScreen.tsx","hooks/createTeam/useCreateTeam.ts","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/rootSaga.ts","index.tsx","app/store.ts"],"names":["useUser","useSelector","state","user","requestSignIn","watchRequestSignIn","userSaga","Actions","signIn","createAction","signOut","signInCompleted","signInError","userReducer","createReducer","status","error","type","action","data","payload","id","password","put","username","takeEvery","all","useUserActions","dispatch","useDispatch","useCallback","signInForm","requestSignOut","RouterPath","RouterUtils","contestId","signUpSuccess","AppHeader","extras","history","useHistory","key","onClick","push","title","extra","Form","create","form","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","values","Item","rules","required","message","prefix","placeholder","Password","htmlType","href","ErrorMessage","msg","showIcon","banner","useQuery","URLSearchParams","useLocation","search","SuccessMessage","SignInScreen","query","to","span","style","marginTop","get","fetchContest","watchFetchRequested","contestSaga","fetchRequested","fetchLoading","fetchCompleted","contestReducer","description","ContestItem","contest","visibleAddTeam","ContestList","userState","contestState","length","map","ContestScreen","requestFetch","useContestActions","useEffect","fetchTeam","teamSaga","teamReducer","name","users","MemberItem","member","MemberList","members","Fragment","TeamItem","team","TeamList","teamState","TeamsScreen","fetchRequest","useTeamActions","requestSignUp","watchRequestSignUp","signUpSaga","request","success","signUpReducer","requestSignup","signUpForm","useSignUpActions","hasFeedback","validator","_rule","value","callback","force","getFieldValue","SignUpScreen","signUpState","signUp","requestCreateTeam","watchRequestCreateTeam","createTeamSaga","createTeamReducer","contact","FormOptions","mapPropsToFields","props","createFormField","useCreateTeamActions","CreateTeamScreen","createTeam","alert","Header","Layout","Content","App","basename","process","backgroundColor","exact","path","Boolean","window","location","hostname","match","rootReducer","combineReducers","rootSaga","store","sagaMiddleware","createSagaMiddleware","configureStore","reducer","middleware","getDefaultMiddleware","devTools","run","configureAppStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e7c0f29.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/rootReducer\";\n\nexport default function useUser() {\n  const user = useSelector((state: RootState) => state.user);\n  return user;\n}","import { User, SignInForm } from \"../api\";\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { takeEvery, all, put } from \"redux-saga/effects\";\n\nconst Actions = {\n  signIn: 'user/signIn',\n  signOut: 'user/signOut',\n  signInCompleted: 'user/signInCompleted',\n  signInError: 'user/signInError'\n};\n\nexport type UserState =\n  { status: 'unauthorized'; error: boolean; } |\n  { status: 'authorized', data: User; };\n\nconst initialState: UserState = { status: 'unauthorized', error: false };\n\nexport const signIn = createAction<SignInForm>(Actions.signIn);\nexport const signOut = createAction(Actions.signOut);\nconst signInCompleted = createAction<User>(Actions.signInCompleted);\nconst signInError = createAction(Actions.signInError);\n\nexport const userReducer = createReducer<UserState>(initialState, {\n  [signOut.type]: (state: UserState, action) => {\n    return { status: \"unauthorized\", error: false };\n  },\n  [signInCompleted.type]: (state: UserState, action) => {\n    return { status: \"authorized\", data: action.payload };\n  },\n  [signInError.type]: (state: UserState, action) => {\n    return { status: \"unauthorized\", error: true };\n  }\n});\n\nfunction* requestSignIn(action: any) {\n  const { id, password } = (action.payload as SignInForm);\n  yield put(signInCompleted({ username: `${id}, ${password}` }));\n}\n\nfunction* watchRequestSignIn() {\n  yield takeEvery(Actions.signIn, requestSignIn);\n}\n\nexport function* userSaga() {\n  yield all([watchRequestSignIn()]);\n}","import { useDispatch } from \"react-redux\";\nimport { signIn, signOut } from \"../../modules/user\";\nimport { useCallback } from \"react\";\nimport { SignInForm } from \"../../api\";\n\nexport default function useUserActions() {\n  const dispatch = useDispatch();\n  const requestSignIn = useCallback(\n    (signInForm: SignInForm) => {\n      dispatch(signIn(signInForm));\n    }, [dispatch]\n  );\n  const requestSignOut = useCallback(() => {\n    dispatch(signOut());\n  }, [dispatch]);\n  return { requestSignIn, requestSignOut };\n}","export const RouterPath = {\n  root: \"/\",\n  signIn: \"/signIn\",\n  signUp: \"/signUp\",\n  teams: \"/teams\",\n  createTeam: \"/createTeam\"\n};\n\nexport const RouterUtils = {\n  teams: (contestId: string) => `${RouterPath.teams}?contest=${contestId}`,\n  createTeam: (contestId: string) => `${RouterPath.createTeam}?contest=${contestId}`,\n  signIn: (signUpSuccess: boolean) => `${RouterPath.signIn}?signUpSuccess=${signUpSuccess}`\n};","import React from 'react';\nimport { PageHeader, Button, Avatar } from 'antd';\nimport useUser from '../hooks/user/useUser';\nimport { useHistory } from 'react-router-dom';\nimport useUserActions from '../hooks/user/useUserActions';\nimport { RouterPath } from '../utils/constants';\n\nexport default function AppHeader() {\n  const user = useUser();\n  const history = useHistory();\n  const { requestSignOut } = useUserActions();\n\n  let extras;\n  if (user.status === \"unauthorized\") {\n    extras = [\n      <Button key=\"signIn\" type=\"primary\" onClick={ () => {\n        history.push(RouterPath.signIn);\n      } }>로그인</Button>\n    ];\n  } else {\n    extras = [\n      <Avatar key=\"avatar\">T</Avatar>,\n      <Button key=\"signOut\" type=\"primary\" onClick={ () => {\n        history.push(RouterPath.root);\n        requestSignOut();\n      } }>로그아웃</Button>\n    ];\n  }\n\n  return (\n    <PageHeader\n      title=\"Contest Helper\"\n      extra={ extras } />\n  );\n}\n","import React, { FormEvent } from 'react';\nimport { Form, Button, Input, Icon } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport useUserActions from '../../hooks/user/useUserActions';\nimport { RouterPath } from '../../utils/constants';\n\nfunction SignInForm({ form }: FormComponentProps) {\n  const { requestSignIn } = useUserActions();\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      const { id, password } = values;\n      requestSignIn({ id: id, password: password });\n    });\n  };\n\n  return (\n    <Form onSubmit={ handleSubmit }>\n      <Form.Item>\n        {\n          getFieldDecorator('id', {\n            rules: [\n              { required: true, message: '아이디는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              prefix={ <Icon type=\"user\" /> }\n              placeholder=\"아이디\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        {\n          getFieldDecorator('password', {\n            rules: [\n              { required: true, message: '비밀번호는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input.Password\n              prefix={ <Icon type=\"lock\" /> }\n              placeholder=\"비밀번호\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">로그인</Button>\n      </Form.Item>\n      <Form.Item>\n        혹은 <a href={ RouterPath.signUp }>회원가입 하기</a>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default Form.create()(SignInForm);","import React from 'react';\nimport { Alert } from 'antd';\n\ninterface IErrorMessageProps {\n  msg: string;\n}\n\nexport default function ErrorMessage({ msg }: IErrorMessageProps) {\n  return (\n    <Alert\n      showIcon\n      message={ msg }\n      type=\"error\"\n      banner\n    />\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}","import React from 'react';\nimport { Alert } from 'antd';\n\ninterface ISuccessMessageProps {\n  msg: string;\n}\n\nexport default function SuccessMessage({ msg }: ISuccessMessageProps) {\n  return (\n    <Alert\n      showIcon\n      message={ msg }\n      type=\"success\"\n      banner\n    />\n  );\n}\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport SignInForm from '../components/user/SignInForm';\nimport useUser from '../hooks/user/useUser';\nimport { Redirect } from 'react-router-dom';\nimport ErrorMessage from '../components/ErrorMessage';\nimport { RouterPath } from '../utils/constants';\nimport useQuery from '../hooks/useQuery';\nimport SuccessMessage from '../components/SuccessMessage';\n\nexport default function SignInScreen() {\n  const user = useUser();\n  const query = useQuery();\n\n  if (user.status === 'authorized') {\n    return <Redirect to={ RouterPath.root } />;\n  }\n\n  return (\n    <Row>\n      <Col span={ 8 } />\n      <Col span={ 8 } style={ { marginTop: 16 } }>\n        {\n          user.status === 'unauthorized' && user.error &&\n          <ErrorMessage msg=\"로그인에 실패하였습니다\" />\n        }\n        {\n          query.get(\"signUpSuccess\") &&\n          <SuccessMessage msg=\"회원가입에 성공하였습니다\" />\n        }\n        <SignInForm />\n      </Col>\n      <Col span={ 8 } />\n    </Row>\n  );\n}\n","import { Contest } from \"../api\";\nimport { createReducer, createAction } from \"@reduxjs/toolkit\";\nimport { all, takeEvery, put } from \"redux-saga/effects\";\n\nconst Actions = {\n  fetchRequested: 'contest/fetchRequested',\n  fetchLoading: 'contest/fetchLoading',\n  fetchCompleted: 'content/fetchCompleted'\n};\n\nexport type ContentState =\n  { status: 'loading'; } |\n  { status: 'finished', data: Contest[]; };\n\nconst initialState: ContentState = { status: 'loading' };\n\nexport const fetchRequested = createAction(Actions.fetchRequested);\nconst fetchLoading = createAction(Actions.fetchLoading);\nconst fetchCompleted = createAction<Contest[]>(Actions.fetchCompleted);\n\nexport const contestReducer = createReducer<ContentState>(initialState, {\n  [fetchLoading.type]: (state: ContentState, action) => {\n    return { status: \"loading\" };\n  },\n  [fetchCompleted.type]: (state: ContentState, action) => {\n    return { status: \"finished\", data: action.payload };\n  }\n});\n\nfunction* fetchContest() {\n  yield put(fetchLoading());\n  yield put(fetchCompleted([\n    {\n      id: \"test\",\n      title: \"Hello\",\n      description: \"World\"\n    }\n  ] as Contest[]));\n}\n\nfunction* watchFetchRequested() {\n  yield takeEvery(Actions.fetchRequested, fetchContest);\n}\n\nexport function* contestSaga() {\n  yield all([watchFetchRequested()]);\n}","import React from 'react';\nimport { Contest } from '../../api';\nimport { Button } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport { RouterUtils } from '../../utils/constants';\n\ninterface IContestItemProps {\n  contest: Contest;\n  visibleAddTeam: boolean;\n}\n\nexport default function ContestItem({ contest, visibleAddTeam }: IContestItemProps) {\n  const history = useHistory();\n\n  const handleCreateTeam = () => {\n    history.push(RouterUtils.createTeam(contest.id));\n  };\n\n  const handleShowTeams = () => {\n    history.push(RouterUtils.teams(contest.id));\n  };\n\n  return (\n    <div>\n      <p>{ contest.title }</p>\n      <p>{ contest.description }</p>\n      {\n        visibleAddTeam && <Button onClick={ handleCreateTeam }>팀 생성</Button>\n      }\n      <Button onClick={ handleShowTeams }>팀 목록</Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Spin, Empty } from 'antd';\nimport ContestItem from './ContestItem';\nimport useContest from '../../hooks/contest/useContest';\nimport useUser from '../../hooks/user/useUser';\n\nexport default function ContestList() {\n  const userState = useUser();\n  const contestState = useContest();\n\n  if (contestState.status === 'loading') return <Spin />;\n\n  if (contestState.data.length === 0) return <Empty />;\n\n  return (\n    <div>\n      {\n        contestState.data.map((contest) =>\n          <ContestItem\n            key={ contest.id }\n            contest={ contest }\n            visibleAddTeam={ userState.status === 'authorized' } />)\n      }\n    </div>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/rootReducer\";\n\nexport default function useContest() {\n  const contest = useSelector((state: RootState) => state.contest);\n  return contest;\n}","import React, { useEffect } from 'react';\nimport useContestActions from '../hooks/contest/useContestActions';\nimport ContestList from '../components/contest/ContestList';\n\nexport default function ContestScreen() {\n  const { requestFetch } = useContestActions();\n\n  useEffect(() => {\n    requestFetch();\n  });\n\n  return (\n    <ContestList />\n  );\n}\n","import { useDispatch } from \"react-redux\";\nimport { fetchRequested } from \"../../modules/contest\";\nimport { useCallback } from \"react\";\n\nexport default function useContestActions() {\n  const dispatch = useDispatch();\n  const requestFetch = useCallback(\n    () => {\n      dispatch(fetchRequested());\n    }, [dispatch],\n  );\n  return { requestFetch };\n}","import { Team } from \"../api\";\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { put, takeEvery, all } from \"redux-saga/effects\";\n\nconst Actions = {\n  fetchRequested: 'team/fetchRequested',\n  fetchLoading: 'team/fetchLoading',\n  fetchCompleted: 'team/fetchCompleted',\n};\n\nexport type TeamState =\n  { status: 'loading'; } |\n  { status: 'finished', data: Team[]; };\n\nconst initialState: TeamState = { status: 'loading' };\n\nexport const fetchRequested = createAction<string>(Actions.fetchRequested);\nconst fetchLoading = createAction(Actions.fetchLoading);\nconst fetchCompleted = createAction<Team[]>(Actions.fetchCompleted);\n\nexport const teamReducer = createReducer<TeamState>(initialState, {\n  [fetchLoading.type]: (state: TeamState, action) => {\n    return { status: \"loading\" };\n  },\n  [fetchCompleted.type]: (state: TeamState, action) => {\n    return { status: \"finished\", data: action.payload };\n  }\n});\n\nfunction* fetchTeam(action: any) {\n  const contestId = action.payload as string;\n  yield put(fetchLoading());\n  yield put(fetchCompleted([\n    {\n      name: \"Test\",\n      users: [\n        \"A\",\n        \"B\"\n      ]\n    }\n  ] as Team[]));\n}\n\nexport function* watchFetchRequested() {\n  yield takeEvery(Actions.fetchRequested, fetchTeam);\n}\n\nexport function* teamSaga() {\n  yield all([watchFetchRequested()]);\n}","import React from 'react';\n\ninterface IMemberItemProps {\n  member: string;\n}\n\nexport default function MemberItem({ member }: IMemberItemProps) {\n  return (\n    <div>\n      <p>Member: { member }</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport MemberItem from './MemberItem';\n\ninterface IMemberListProps {\n  members: string[];\n}\n\nexport default function MemberList({ members }: IMemberListProps) {\n  return (\n    <React.Fragment>\n      {\n        members.map(\n          (member) => <MemberItem key={ member } member={ member } />\n        )\n      }\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { Team } from '../../api';\nimport MemberList from './MemberList';\n\ninterface ITeamITemProps {\n  team: Team;\n}\n\nexport default function TeamItem({ team }: ITeamITemProps) {\n  return (\n    <div>\n      <p>{ team.name }</p>\n      <MemberList members={ team.users } />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useTeam } from '../../hooks/team/useTeam';\nimport { Spin, Empty } from 'antd';\nimport TeamItem from './TeamItem';\n\nexport default function TeamList() {\n  const teamState = useTeam();\n\n  if (teamState.status === 'loading') return <Spin />;\n\n  if (teamState.data.length === 0) return <Empty />;\n\n  return (\n    <React.Fragment>\n      {\n        teamState.data.map((team) =>\n          <TeamItem key={ team.id } team={ team } />\n        )\n      }\n    </React.Fragment>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/rootReducer\";\n\nexport function useTeam() {\n  const team = useSelector((state: RootState) => state.team);\n  return team;\n}","import React, { useEffect } from 'react';\nimport useTeamActions from '../hooks/team/useTeamActions';\nimport TeamList from '../components/team/TeamList';\nimport useQuery from '../hooks/useQuery';\n\nexport default function TeamsScreen() {\n  const { fetchRequest } = useTeamActions();\n  const query = useQuery();\n\n  useEffect(() => {\n    const contestId = query.get(\"contest\");\n    if (contestId) {\n      fetchRequest(contestId);\n    }\n  });\n\n  return (\n    <TeamList />\n  );\n}\n","import { useDispatch } from \"react-redux\";\nimport { useCallback } from \"react\";\nimport { fetchRequested } from \"../../modules/team\";\n\nexport default function useTeamActions() {\n  const dispatch = useDispatch();\n  const fetchRequest = useCallback(\n    (contestId: string) => {\n      dispatch(fetchRequested(contestId));\n    }, [dispatch]);\n  return { fetchRequest };\n}","import { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { SignUpForm } from \"../api\";\nimport { put, takeEvery, all } from \"redux-saga/effects\";\n\nconst Actions = {\n  request: 'signUp/request',\n  success: 'signUp/success',\n  error: 'signUp/error'\n};\n\nexport type SignUpState =\n  { status: 'none', error: boolean; } |\n  { status: 'success'; };\n\nconst initialState: SignUpState = { status: 'none', error: false };\n\nexport const request = createAction<SignUpForm>(Actions.request);\nconst success = createAction(Actions.success);\nconst error = createAction(Actions.error);\n\nexport const signUpReducer = createReducer<SignUpState>(initialState, {\n  [success.type]: (state: SignUpState, action) => {\n    return { status: 'success' };\n  },\n  [error.type]: (state: SignUpState, action) => {\n    return { status: 'none', error: true };\n  }\n});\n\nfunction* requestSignUp(action: any) {\n  const { id, password, username } = (action.payload as SignUpForm);\n  yield put(success());\n}\n\nfunction* watchRequestSignUp() {\n  yield takeEvery(Actions.request, requestSignUp);\n}\n\nexport function* signUpSaga() {\n  yield all([watchRequestSignUp()]);\n}","import React, { FormEvent } from 'react';\nimport { Form, Button, Input, Icon } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport useSignUpActions from '../../hooks/signUp/useSignUpActions';\n\nfunction SignUpForm({ form }: FormComponentProps) {\n  const { requestSignup } = useSignUpActions();\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      const { id, password, name } = values;\n      requestSignup({ id: id, password: password, username: name });\n    });\n  };\n\n  const compareToFirstPassword = (_rule: any, value: any, callback: any) => {\n    if (value && value !== form.getFieldValue('password')) {\n      callback('비밀번호가 일치하지 않습니다');\n    } else {\n      callback();\n    }\n  };\n\n  const validateToNextPassword = (_rule: any, value: any, callback: any) => {\n    if (value) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  return (\n    <Form onSubmit={ handleSubmit }>\n      <Form.Item>\n        {\n          getFieldDecorator('name', {\n            rules: [\n              { required: true, message: '이름은 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              placeholder=\"이름\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        {\n          getFieldDecorator('id', {\n            rules: [\n              { required: true, message: '아이디는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              placeholder=\"아이디\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item hasFeedback>\n        {\n          getFieldDecorator('password', {\n            rules: [\n              { required: true, message: '비밀번호는 비워둘 수 없습니다' },\n              { validator: validateToNextPassword }\n            ]\n          })(\n            <Input.Password\n              prefix={ <Icon type=\"lock\" /> }\n              placeholder=\"비밀번호\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item hasFeedback>\n        {\n          getFieldDecorator('password-recheck', {\n            rules: [\n              { required: true, message: '비밀번호 확인은 비워둘 수 없습니다' },\n              { validator: compareToFirstPassword }\n            ]\n          })(\n            <Input.Password\n              prefix={ <Icon type=\"lock\" /> }\n              placeholder=\"비밀번호 확인\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">회원가입</Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default Form.create()(SignUpForm);","import { useDispatch } from \"react-redux\";\nimport { request } from \"../../modules/signUp\";\nimport { SignUpForm } from \"../../api\";\nimport { useCallback } from \"react\";\n\nexport default function useSignUpActions() {\n  const dispatch = useDispatch();\n  const requestSignup = useCallback(\n    (signUpForm: SignUpForm) => dispatch(request(signUpForm)),\n    [dispatch]\n  );\n  return { requestSignup };\n}","import React from 'react';\nimport SignUpForm from '../components/user/SignUpForm';\nimport { Row, Col } from 'antd';\nimport useSignUp from '../hooks/signUp/useSignUp';\nimport { Redirect } from 'react-router-dom';\nimport { RouterUtils } from '../utils/constants';\nimport ErrorMessage from '../components/ErrorMessage';\n\nexport default function SignUpScreen() {\n  const signUpState = useSignUp();\n\n  if (signUpState.status === 'success')\n    return <Redirect to={ RouterUtils.signIn(true) } />;\n\n  return (\n    <Row>\n      <Col span={ 8 } />\n      <Col span={ 8 } style={ { marginTop: 16 } }>\n        {\n          signUpState.error &&\n          <ErrorMessage msg=\"회원가입이 실패하였습니다\" />\n        }\n        <SignUpForm />\n      </Col>\n      <Col span={ 8 } />\n    </Row>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/rootReducer\";\n\nexport default function useSignUp() {\n  const signUp = useSelector((state: RootState) => state.signUp);\n  return signUp;\n}","import { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { CreateTeamForm } from \"../api\";\nimport { put, takeEvery, all } from \"redux-saga/effects\";\n\nconst Actions = {\n  request: 'createTeam/request',\n  success: 'createTeam/success',\n  error: 'createTeam/error'\n};\n\nexport type CreateTeamState =\n  { status: 'none', error: boolean; } |\n  { status: 'success'; };\n\nconst initialState: CreateTeamState = { status: 'none', error: false };\n\nexport const request = createAction<CreateTeamForm>(Actions.request);\nconst success = createAction(Actions.success);\nconst error = createAction(Actions.error);\n\nexport const createTeamReducer = createReducer<CreateTeamState>(initialState, {\n  [success.type]: (state: CreateTeamState, action) => {\n    return { status: 'success' };\n  },\n  [error.type]: (state: CreateTeamState, action) => {\n    return { status: 'none', error: true };\n  }\n});\n\nfunction* requestCreateTeam(action: any) {\n  const { name, contact } = (action.payload as CreateTeamForm);\n  yield put(success());\n}\n\nfunction* watchRequestCreateTeam() {\n  yield takeEvery(Actions.request, requestCreateTeam);\n}\n\nexport function* createTeamSaga() {\n  yield all([watchRequestCreateTeam()]);\n}","import React, { FormEvent } from 'react';\nimport { Form, Button, Input, Icon } from 'antd';\nimport { FormComponentProps, FormCreateOption } from 'antd/lib/form';\nimport useCreateTeamActions from '../../hooks/createTeam/useCreateTeamActions';\n\ninterface ICreateTeamFormProps extends FormComponentProps {\n  contestId: string;\n}\n\nfunction CreateTeamForm({ form, contestId }: ICreateTeamFormProps) {\n  const { requestCreateTeam } = useCreateTeamActions();\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      const { name, contact } = values;\n      requestCreateTeam({ contestId: contestId, name: name, contact: contact });\n    });\n  };\n\n  return (\n    <Form onSubmit={ handleSubmit }>\n      <Form.Item>\n        {\n          getFieldDecorator('name', {\n            rules: [\n              { required: true, message: '팀 이름은 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              placeholder=\"팀 이름\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        {\n          getFieldDecorator('contact', {\n            rules: [\n              { required: true, message: '연락처는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              prefix={ <Icon type=\"contacts\" /> }\n              placeholder=\"연락처\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">팀 생성</Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nconst mapPropsToFields = (props: ICreateTeamFormProps) => {\n  const { contestId } = props;\n  return {\n    contestId: Form.createFormField({ value: contestId })\n  };\n};\n\nconst FormOptions: FormCreateOption<ICreateTeamFormProps> = {\n  mapPropsToFields\n};\n\nexport default Form.create(FormOptions)(CreateTeamForm);","import { useDispatch } from \"react-redux\";\nimport { request } from \"../../modules/createTeam\";\nimport { CreateTeamForm } from \"../../api\";\nimport { useCallback } from \"react\";\n\nexport default function useCreateTeamActions() {\n  const dispatch = useDispatch();\n  const requestCreateTeam = useCallback(\n    (form: CreateTeamForm) => {\n      dispatch(request(form));\n    },\n    [dispatch],\n  );\n  return { requestCreateTeam };\n}","import React from 'react';\nimport useUser from '../hooks/user/useUser';\nimport { Redirect } from 'react-router-dom';\nimport { RouterPath, RouterUtils } from '../utils/constants';\nimport { Row, Col } from 'antd';\nimport CreateTeamForm from '../components/team/CreateTeamForm';\nimport useQuery from '../hooks/useQuery';\nimport useCreateTeam from '../hooks/createTeam/useCreateTeam';\nimport ErrorMessage from '../components/ErrorMessage';\n\nexport default function CreateTeamScreen() {\n  const user = useUser();\n  const query = useQuery();\n  const createTeam = useCreateTeam();\n\n  if (user.status === 'unauthorized') {\n    alert(\"로그인 후에만 이용할 수 있습니다\");\n    return <Redirect to={ RouterPath.root } />;\n  }\n\n  const contestId = query.get(\"contest\");\n  if (!contestId) {\n    alert(\"대상 공모전이 지정되지 않았습니다\");\n    return <Redirect to={ RouterPath.root } />;\n  }\n\n  if (createTeam.status === 'success') {\n    return <Redirect to={ RouterUtils.teams(contestId) } />;\n  }\n\n  return (\n    <Row>\n      <Col span={ 8 } />\n      <Col span={ 8 } style={ { marginTop: 16 } }>\n        {\n          createTeam.error &&\n          <ErrorMessage msg=\"팀 생성이 실패하였습니다\" />\n        }\n        <CreateTeamForm contestId={ contestId } />\n      </Col>\n      <Col span={ 8 } />\n    </Row>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/rootReducer\";\n\nexport default function useCreateTeam() {\n  const createTeam = useSelector((state: RootState) => state.createTeam);\n  return createTeam;\n}","import React from 'react';\nimport './App.css';\nimport { Layout } from 'antd';\nimport AppHeader from '../components/AppHeader';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SignInScreen from '../screens/SignInScreen';\nimport ContestScreen from '../screens/ContestScreen';\nimport TeamsScreen from '../screens/TeamsScreen';\nimport SignUpScreen from '../screens/SignUpScreen';\nimport { RouterPath } from \"../utils/constants\";\nimport CreateTeamScreen from '../screens/CreateTeamScreen';\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n\n  return (\n    <Router basename={ process.env.PUBLIC_URL }>\n      <Layout>\n        <Header style={ { backgroundColor: \"#f5f5f5\" } }>\n          <AppHeader />\n        </Header>\n        <Content>\n          <Switch>\n            <Route exact path={ RouterPath.root }>\n              <ContestScreen />\n            </Route>\n            <Route path={ RouterPath.signIn }>\n              <SignInScreen />\n            </Route>\n            <Route path={ RouterPath.signUp }>\n              <SignUpScreen />\n            </Route>\n            <Route path={ RouterPath.teams }>\n              <TeamsScreen />\n            </Route>\n            <Route path={ RouterPath.createTeam }>\n              <CreateTeamScreen />\n            </Route>\n          </Switch>\n        </Content>\n      </Layout>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { contestReducer } from \"../modules/contest\";\nimport { userReducer } from \"../modules/user\";\nimport { teamReducer } from \"../modules/team\";\nimport { signUpReducer } from \"../modules/signUp\";\nimport { createTeamReducer } from \"../modules/createTeam\";\n\nconst rootReducer = combineReducers({\n  contest: contestReducer,\n  user: userReducer,\n  team: teamReducer,\n  signUp: signUpReducer,\n  createTeam: createTeamReducer\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { all } from \"redux-saga/effects\";\nimport { contestSaga } from \"../modules/contest\";\nimport { userSaga } from \"../modules/user\";\nimport { teamSaga } from \"../modules/team\";\nimport { signUpSaga } from \"../modules/signUp\";\nimport { createTeamSaga } from \"../modules/createTeam\";\n\nexport default function* rootSaga() {\n  yield all([\n    contestSaga(),\n    userSaga(),\n    teamSaga(),\n    signUpSaga(),\n    createTeamSaga()\n  ]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureAppStore from './app/store';\n\nconst store = configureAppStore();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nexport default function configureAppStore() {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [sagaMiddleware, ...getDefaultMiddleware()],\n    devTools: true\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}"],"sourceRoot":""}