{"version":3,"sources":["components/AppHeader.tsx","components/AppSignin.tsx","modules/user.ts","components/user/SignInForm.tsx","hooks/user/useUserActions.ts","screens/SignInScreen.tsx","app/App.tsx","serviceWorker.ts","modules/contest.ts","app/rootReducer.ts","app/rootSaga.ts","index.tsx","app/store.ts"],"names":["AppHeader","title","AppSignin","history","useHistory","type","style","marginLeft","onClick","push","requestSignIn","watchRequestSignIn","userSaga","Actions","signIn","createAction","signInCompleted","signInError","userReducer","createReducer","status","error","state","action","data","payload","id","password","put","username","takeEvery","all","Form","create","form","dispatch","useDispatch","useCallback","signInForm","useUserActions","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","values","Item","rules","required","message","prefix","placeholder","htmlType","className","SignInScreen","span","marginTop","Header","Layout","Content","App","basename","process","backgroundColor","exact","path","Boolean","window","location","hostname","match","fetchContest","watchFetchRequested","contestSaga","fetchLoading","fetchCompleted","contestReducer","rootReducer","combineReducers","contest","user","rootSaga","store","sagaMiddleware","createSagaMiddleware","configureStore","reducer","middleware","getDefaultMiddleware","devTools","run","configureAppStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e24778e.chunk.js","sourcesContent":["import React from 'react';\nimport { PageHeader } from 'antd';\n\nexport default function AppHeader() {\n  return (\n    <PageHeader title=\"Contest Helper\" />\n  );\n}\n","import React from 'react';\nimport { Button } from 'antd';\nimport { useHistory } from 'react-router-dom';\n\nexport default function AppSignin() {\n  const history = useHistory();\n\n  return (\n    <div>\n      <Button type=\"primary\" style={ { marginLeft: 8 } } onClick={ () => {\n        history.push(\"/signin\");\n      } }>Signin</Button>\n    </div>\n  );\n}\n","import { User, SignInForm } from \"../api\";\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { takeEvery, all, put } from \"redux-saga/effects\";\n\nconst Actions = {\n  signIn: 'user/signIn',\n  signInCompleted: 'user/signInCompleted',\n  signInError: 'user/signInError'\n};\n\nexport type UserState =\n  { status: 'unauthorized'; error: boolean; } |\n  { status: 'authorized', data: User; };\n\nconst initialState: UserState = { status: 'unauthorized', error: false };\n\nexport const signIn = createAction<SignInForm>(Actions.signIn);\nconst signInCompleted = createAction<User>(Actions.signInCompleted);\nconst signInError = createAction(Actions.signInError);\n\nexport const userReducer = createReducer<UserState>(initialState, {\n  [signInCompleted.type]: (state: UserState, action) => {\n    return { status: \"authorized\", data: action.payload };\n  },\n  [signInError.type]: (state: UserState, action) => {\n    return { status: \"unauthorized\", error: true };\n  }\n});\n\nfunction* requestSignIn(action: any) {\n  const { id, password } = (action.payload as SignInForm);\n  yield put(signInCompleted({ username: `${id}, ${password}` }));\n}\n\nexport function* watchRequestSignIn() {\n  yield takeEvery(Actions.signIn, requestSignIn);\n}\n\nexport function* userSaga() {\n  yield all([watchRequestSignIn()]);\n}","import React, { FormEvent } from 'react';\nimport { Form, Button, Input, Icon } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport useUserActions from '../../hooks/user/useUserActions';\n\nfunction SignInForm({ form }: FormComponentProps) {\n  const { requestSignIn } = useUserActions();\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      const { id, password } = values;\n      requestSignIn({ id: id, password: password });\n    });\n  };\n\n  return (\n    <Form onSubmit={ handleSubmit }>\n      <Form.Item>\n        {\n          getFieldDecorator('id', {\n            rules: [\n              { required: true, message: '아이디는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              prefix={ <Icon type=\"user\" /> }\n              placeholder=\"아이디\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        {\n          getFieldDecorator('password', {\n            rules: [\n              { required: true, message: '비밀번호는 비워둘 수 없습니다' }\n            ]\n          })(\n            <Input\n              prefix={ <Icon type=\"user\" /> }\n              type=\"password\"\n              placeholder=\"비밀번호\"\n            />\n          )\n        }\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n          Log in\n          </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default Form.create()(SignInForm);","import { useDispatch } from \"react-redux\";\nimport { signIn } from \"../../modules/user\";\nimport { useCallback } from \"react\";\nimport { SignInForm } from \"../../api\";\n\nexport default function useUserActions() {\n  const dispatch = useDispatch();\n  const requestSignIn = useCallback(\n    (signInForm: SignInForm) => {\n      dispatch(signIn(signInForm));\n    }, [dispatch]\n  );\n  return { requestSignIn };\n}","import React from 'react';\nimport { Row, Col } from 'antd';\nimport SignInForm from '../components/user/SignInForm';\n\nexport default function SignInScreen() {\n  return (\n    <Row>\n      <Col span={ 8 } />\n      <Col span={ 8 } style={ { marginTop: 16 } }>\n        <SignInForm />\n      </Col>\n      <Col span={ 8 } />\n    </Row>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Layout } from 'antd';\nimport AppHeader from '../components/AppHeader';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AppSignin from '../components/AppSignin';\nimport SignInScreen from '../screens/SignInScreen';\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n\n  return (\n    <Router basename={ process.env.PUBLIC_URL }>\n      <Layout>\n        <Header style={ { backgroundColor: \"#fff\" } }>\n          <AppHeader />\n        </Header>\n        <Content>\n          <Switch>\n            <Route exact path=\"/\">\n              <AppSignin />\n            </Route>\n            <Route path=\"/signin\">\n              <SignInScreen />\n            </Route>\n          </Switch>\n        </Content>\n      </Layout>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Contest } from \"../api\";\nimport { createReducer, createAction } from \"@reduxjs/toolkit\";\nimport { all, takeEvery, put } from \"redux-saga/effects\";\n\nconst Actions = {\n  fetchRequested: 'contest/fetchRequested',\n  fetchLoading: 'contest/fetchLoading',\n  fetchCompleted: 'content/fetchCompleted'\n};\n\nexport type ContentState =\n  { status: 'loading'; } |\n  { status: 'finished', data: Contest[]; };\n\nconst initialState: ContentState = { status: 'loading' };\n\nexport const fetchRequested = createAction(Actions.fetchRequested);\nconst fetchLoading = createAction(Actions.fetchLoading);\nconst fetchCompleted = createAction<Contest[]>(Actions.fetchCompleted);\n\nexport const contestReducer = createReducer<ContentState>(initialState, {\n  [fetchLoading.type]: (state: ContentState, action) => {\n    return { status: \"loading\" };\n  },\n  [fetchCompleted.type]: (state: ContentState, action) => {\n    return { status: \"finished\", data: action.payload };\n  }\n});\n\nfunction* fetchContest() {\n  yield put(fetchLoading());\n  yield put(fetchCompleted([]));\n}\n\nexport function* watchFetchRequested() {\n  yield takeEvery(Actions.fetchRequested, fetchContest);\n}\n\nexport function* contestSaga() {\n  yield all([watchFetchRequested()]);\n}","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { contestReducer } from \"../modules/contest\";\nimport { userReducer } from \"../modules/user\";\n\nconst rootReducer = combineReducers({\n  contest: contestReducer,\n  user: userReducer\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { all } from \"redux-saga/effects\";\nimport { contestSaga } from \"../modules/contest\";\nimport { userSaga } from \"../modules/user\";\n\nexport default function* rootSaga() {\n  yield all([contestSaga(), userSaga()]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureAppStore from './app/store';\n\nconst store = configureAppStore();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nexport default function configureAppStore() {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [sagaMiddleware, ...getDefaultMiddleware()],\n    devTools: true\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}"],"sourceRoot":""}